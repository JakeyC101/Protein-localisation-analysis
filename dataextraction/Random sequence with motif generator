# Generates a random amino acid sequence of length 'sequencelength' with 'motif' inserted into a random position within the sequence
# This code uses a KDEL motif inserted into a peptide sequence of total length 30 as an example.

import random

def sequencegenerator(motif, sequencelength):
    residueslist = "ARNDCQEGHILKMFPSTWYV"
    randomsequence = ''.join([random.choice(residueslist) for x in range(sequencelength-len(motif))])      # Joins together a random letter from residueslist 50 times with replacement to generate a random amino acid sequence
    motifposition = random.randrange(sequencelength)                                                       # Generates a random position within the sequence for the motif to insert into
    newsequence = randomsequence[:motifposition] + motif + randomsequence[motifposition:]                  # Generates a list of every sequence up to the motif position + the motif + everything after motif position
    return (newsequence)

sequencegenerator('KDEL', 30)

# The code below uses sequencegenerator() to produce a FASTA file containing a set number of sequences, with an optional number of those sequences containing a randomly placed motif of choice

def fastagenerator(motif, sequencelength, sequenceswithmotif, sequenceswithoutmotif, outputlocation):
    fastalist = []                                                                                          #Create empty list in which to store sequences
    for x in range(sequenceswithmotif):
        sequence = sequencegenerator(motif, sequencelength)
        fastalist.append(sequence)
    for y in range(sequenceswithoutmotif):
        sequence = sequencegenerator('', sequencelength)
        fastalist.append(sequence)
    fastafile = open(outputlocation + '.fa', 'w' )
    for i in fastalist:
        fastafile.write('>identifier' + str(fastalist.index(i)) + '\n' + i + '\n')                          # Generates FASTA file containing numbered identifiers and the list of sequences in fastalist
